glpat-fe7ej9jgvGzVBzvtvRXZ


deact#또비활성화


// 뭔지 모름 메모리 초과 안해준다고  
ios::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);




///////////////////////////////////////////////////////////////////////////////////////

unique
지정된 범위에서 서로 옆에 있는 중복 요소를 제거합니다.
주어진 코드에서 words.erase(unique(words.begin(),words.end()),words.end()); 부분은 벡터에서 중복된 단어를 제거하는 역할을 합니다. 이 부분을 이해하려면 unique 함수와 erase 함수가 어떻게 작동하는지 이해해야 합니다.

unique 함수
unique 함수는 연속된 중복 요소를 제거하는 역할을 합니다. 정확히 말하면, 중복된 요소를 벡터의 앞쪽으로 모은 후, 새로운 끝 지점을 반환합니다. 예를 들어, 벡터가 다음과 같다고 가정해 봅시다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"]
unique 함수를 사용하면 다음과 같이 변합니다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"] -> ["apple", "banana", "cherry", "banana", "banana"]
그리고 새로운 끝 지점의 iterator를 반환합니다.

erase 함수
erase 함수는 벡터의 특정 범위의 요소를 제거합니다. 여기서는 unique 함수가 반환한 iterator부터 벡터의 끝까지를 제거합니다.

코드 설명
cpp
코드 복사
words.erase(unique(words.begin(),words.end()),words.end());
이 코드는 다음과 같은 과정을 거칩니다:

unique(words.begin(), words.end())는 벡터 내에서 연속된 중복 요소를 앞으로 이동시키고 새로운 끝 지점을 반환합니다.
erase 함수는 이 새로운 끝 지점부터 벡터의 실제 끝까지의 요소를 제거합니다.
따라서 전체 벡터 내에서 중복된 요소를 제거하여 유일한 요소만 남게 됩니다.

예제
벡터 words가 다음과 같다고 가정합시다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"]
unique 함수 실행 후:

css
코드 복사
["apple", "banana", "cherry", "banana", "banana"]
erase 함수 실행 후:

css
코드 복사
["apple", "banana", "cherry"]


복사생성




///////////////////////////////////////////////////////////////////////////////////////






sort 함수가 아닌 stable_sort 함수를 사용한 이유는

일반적으로 sort 함수보다 빠른 정렬 알고리즘이기도 하지만

가장 큰 차이점은 안정 정렬을 보장한다는 것이다.

 

정렬을 했을 때 중복된 값들의 순서가 변하지 않으면 안정(Stable) 정렬이라고 일컫는데

///////////////////////////////////////////////////////////////////////////////////////


distance(arr_unique.begin(), lower_bound(arr_unique.begin(), arr_unique.end(), arr[i]))

lower_bound 함수:

lower_bound 함수는 arr_unique와 같은 정렬된 컨테이너에서 주어진 값보다 크거나 같은 첫 번째 위치를 찾습니다.
이 함수는 arr_unique의 반복자(이터레이터)를 반환합니다. 이 반복자는 arr_unique의 원소에 대한 참조입니다.


distance 함수:

distance 함수는 두 반복자(이터레이터) 사이의 거리를 계산합니다.
반복자 간의 거리는 원소의 개수를 의미합니다. 즉, 시작 반복자와 끝 반복자 사이의 원소 수를 반환합니다.

///////////////////////////////////////////////////////////////////////////////////////


cin.ignore();
//입력 버퍼 지워주기(cin 사용 후 \n가 입력버퍼에 남아있어서 getline에서 입력 처리가 된다.)


///////////////////////////////////////////////////////////////////////////////////////




_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF)
-crtBreakAllc = (블록위치) // 메모리 누수가 되면 경고


///////////////////////////////////////////////////////////////////////////////////////


[[nodiscard]] int HI(int a, int b)
//리턴값을 안 받으면 에러


///////////////////////////////////////////////////////////////////////////////////////







람다 캡쳐 조심

///////////////////////////////////////////////////////////////////////////////////////


std::function


///////////////////////////////////////////////////////////////////////////////////////

wstring Wstring;
strcmp() 문자열비교 함수 (return int)
Wstring.find() (index(size_t) return)
std::wstring::npos
Wstring.replace() 삽입

std::stoi(string);
to_wstring(int);
string.data(); ??

utf-8 -> (wstring)utf-16
#include <codecvt>
std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>>  convert;
std::wstring WString = converter.form_bytes(string); 

///////////////////////////////////////////////////////////////////////////////////////


static 변수는 컴파일 시작하자마자 데이터영역에 만들어진다.
static 함수는 class의 this 를 받지 못한다.
함수뒤 const는 안에 있는 this에 한정

///////////////////////////////////////////////////////////////////////////////////////

// 복사 생성자
FClass2(const FClass2& InOther)
	: a(InOther.a)
	, Pointer(new int(*InOther.Pointer))
	// , Pointer(InOther.Pointer) // 기본 복사 생성자가 해줌
{
}

// 이동 생성자(구현하지 않으면 복사 생성자가 호출)
FClass2(FClass2&& InOther) noexcept // noexcept : 예외가 발생하지 않게 해준다.
	: a(InOther.a)
	, Pointer(InOther.Pointer)
{
	InOther.a = 0;
	InOther.Pointer = nullptr;
}


///////////////////////////////////////////////////////////////////////////////////////

다이렉트 케스팅 하는이유

데이터 풀링

///////////////////////////////////////////////////////////////////////////////////////

noexcept 는 throw가 있으면 예외가 뜸? 멈춤?

이동생성자에 noexcept를 사용하는 이유 
1. 성능 최적화. 
2. 예외 안전성 : 이동생성자가 예외를 던지지 않는 다는 것을 보장하면, 코드의 예외 안전성을 높일 수 있다.

///////////////////////////////////////////////////////////////////////////////////////


백트레킹, BFS, DFS


///////////////////////////////////////////////////////////////////////////////////////


20240823 14 27



///////////////////////////////////////////////////////////////////////////////////////

rapidjson::Document Doc(rapidjson::kObjectType);

Doc은 JSON 문서를 나타내는 rapidjson::Document 객체입니다.
kObjectType은 이 문서가 JSON 객체({}) 형식임을 나타냅니다. 즉, Doc은 빈 JSON 객체로 초기화됩니다.
rapidjson::Value PlayerInfo(rapidjson::kObjectType);

PlayerInfo는 또 다른 JSON 객체를 나타내는 rapidjson::Value 객체입니다.
kObjectType을 사용하여 이 객체도 빈 JSON 객체로 초기화됩니다.
InPlayer->Save(PlayerInfo, Doc.GetAllocator());

InPlayer는 PlayerInfo라는 JSON 객체에 데이터를 저장하는 역할을 합니다.
Save 함수는 InPlayer 객체의 데이터를 PlayerInfo에 저장하는 것으로 보이며, 이를 위해 Doc에서 메모리 할당자를 가져옵니다.
메모리 할당자(Allocator)는 RapidJSON에서 JSON 요소를 추가할 때 필요한 메모리 관리 기능을 제공합니다.
Doc.AddMember("PlayerInfo", PlayerInfo, Doc.GetAllocator());

Doc JSON 객체에 "PlayerInfo"라는 이름의 멤버를 추가합니다.
이 멤버의 값은 앞서 PlayerInfo에 저장된 JSON 객체입니다.
다시 한 번, 메모리 할당자는 새로운 JSON 멤버를 추가하기 위해 필요합니다.
rapidjson::StringBuffer Buffer;

Buffer는 JSON 데이터를 문자열로 변환할 때 사용되는 버퍼입니다.
StringBuffer는 RapidJSON의 메모리 버퍼 클래스이며, 데이터를 std::string과 비슷한 방식으로 저장할 수 있습니다.
rapidjson::Writer<rapidjson::StringBuffer> Writer(Buffer);

Writer는 JSON 문서를 직렬화하여 문자열로 변환하는 객체입니다.
이 Writer는 Buffer를 사용하여 데이터를 저장합니다.
Doc.Accept(Writer);

Doc JSON 문서를 Writer에게 전달하여, Writer가 이를 StringBuffer에 기록하게 합니다.
이 과정에서 Doc 객체는 JSON 형식의 문자열로 직렬화됩니다.
std::string Json(Buffer.GetString(), Buffer.GetSize());

Buffer에 저장된 JSON 문자열을 std::string 객체로 변환합니다.
Buffer.GetString()은 JSON 문자열의 시작 주소를 반환하고, Buffer.GetSize()는 문자열의 길이를 반환합니다.
이를 통해 완전한 JSON 데이터를 std::string으로 저장할 수 있습니다.
std::ofstream File(PlayerFile);

PlayerFile이라는 이름의 파일을 쓰기 모드로 엽니다. ofstream은 출력 파일 스트림을 의미하며, 파일에 데이터를 쓸 수 있습니다.
File << Json;

이전에 생성한 JSON 문자열을 파일에 기록합니다.
이로써 PlayerFile에 PlayerInfo를 포함한 JSON 데이터가 저장됩니다.


///////////////////////////////////////////////////////////////////////////////////////


















