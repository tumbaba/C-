
// 뭔지 모름 메모리 초과 안해준다고
ios::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);




///////////////////////////////////////////////////////////////////////////////////////

unique
지정된 범위에서 서로 옆에 있는 중복 요소를 제거합니다.
주어진 코드에서 words.erase(unique(words.begin(),words.end()),words.end()); 부분은 벡터에서 중복된 단어를 제거하는 역할을 합니다. 이 부분을 이해하려면 unique 함수와 erase 함수가 어떻게 작동하는지 이해해야 합니다.

unique 함수
unique 함수는 연속된 중복 요소를 제거하는 역할을 합니다. 정확히 말하면, 중복된 요소를 벡터의 앞쪽으로 모은 후, 새로운 끝 지점을 반환합니다. 예를 들어, 벡터가 다음과 같다고 가정해 봅시다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"]
unique 함수를 사용하면 다음과 같이 변합니다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"] -> ["apple", "banana", "cherry", "banana", "banana"]
그리고 새로운 끝 지점의 iterator를 반환합니다.

erase 함수
erase 함수는 벡터의 특정 범위의 요소를 제거합니다. 여기서는 unique 함수가 반환한 iterator부터 벡터의 끝까지를 제거합니다.

코드 설명
cpp
코드 복사
words.erase(unique(words.begin(),words.end()),words.end());
이 코드는 다음과 같은 과정을 거칩니다:

unique(words.begin(), words.end())는 벡터 내에서 연속된 중복 요소를 앞으로 이동시키고 새로운 끝 지점을 반환합니다.
erase 함수는 이 새로운 끝 지점부터 벡터의 실제 끝까지의 요소를 제거합니다.
따라서 전체 벡터 내에서 중복된 요소를 제거하여 유일한 요소만 남게 됩니다.

예제
벡터 words가 다음과 같다고 가정합시다:

css
코드 복사
["apple", "banana", "apple", "cherry", "banana"]
unique 함수 실행 후:

css
코드 복사
["apple", "banana", "cherry", "banana", "banana"]
erase 함수 실행 후:

css
코드 복사
["apple", "banana", "cherry"]


복사생성




///////////////////////////////////////////////////////////////////////////////////////






sort 함수가 아닌 stable_sort 함수를 사용한 이유는

일반적으로 sort 함수보다 빠른 정렬 알고리즘이기도 하지만

가장 큰 차이점은 안정 정렬을 보장한다는 것이다.

 

정렬을 했을 때 중복된 값들의 순서가 변하지 않으면 안정(Stable) 정렬이라고 일컫는데

///////////////////////////////////////////////////////////////////////////////////////


distance(arr_unique.begin(), lower_bound(arr_unique.begin(), arr_unique.end(), arr[i]))

lower_bound 함수:

lower_bound 함수는 arr_unique와 같은 정렬된 컨테이너에서 주어진 값보다 크거나 같은 첫 번째 위치를 찾습니다.
이 함수는 arr_unique의 반복자(이터레이터)를 반환합니다. 이 반복자는 arr_unique의 원소에 대한 참조입니다.


distance 함수:

distance 함수는 두 반복자(이터레이터) 사이의 거리를 계산합니다.
반복자 간의 거리는 원소의 개수를 의미합니다. 즉, 시작 반복자와 끝 반복자 사이의 원소 수를 반환합니다.

///////////////////////////////////////////////////////////////////////////////////////


cin.ignore();
//입력 버퍼 지워주기(cin 사용 후 \n가 입력버퍼에 남아있어서 getline에서 입력 처리가 된다.)


///////////////////////////////////////////////////////////////////////////////////////




_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF)
-crtBreakAllc = (블록위치) // 메모리 누수가 되면 경고


///////////////////////////////////////////////////////////////////////////////////////


[[nodiscard]] int HI(int a, int b)
//리턴값을 안 받으면 에러


///////////////////////////////////////////////////////////////////////////////////////







람다 캡쳐 조심

///////////////////////////////////////////////////////////////////////////////////////
































